Object subclass: #BT	instanceVariableNames: 'continuationQueue'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!BT commentStamp: 'jjddpp 11/18/2020 20:28' prior: 0!Classe que implementa els mecanismes per fer BackTracking tradicional, dins la pràctica de GRAU-CAP 2020-21.Cal completar el mètode  'try:'Teniu diversos exemples del seu ús  a l'enunciat!!BT methodsFor: 'core' stamp: 'Anonymous 1/18/2021 21:29'!try: aCollection    | p |    p := continuationQueue removeFirst.    ^ Continuation callcc: [ :cc |                       aCollection do: [ :alt | Continuation callcc: [ :calt |                         continuationQueue addLast:         [ calt value: #nil ]. cc value: alt ] ].    ^ p value ].! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 08:28'!with: finalBlock	continuationQueue := OrderedCollection with: finalBlock.! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 07:42'!next	^ self try: #()! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 07:42'!assert: aBoolean	aBoolean ifFalse: [self next]! !!BT methodsFor: 'core' stamp: 'jjddpp 11/18/2020 08:28'!initialize	continuationQueue := OrderedCollection with: [ nil ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BT class	instanceVariableNames: ''!!BT class methodsFor: 'instance creation' stamp: 'jjddpp 11/18/2020 07:42'!with: finalBlock	^ (self new) with: finalBlock! !TestCase subclass: #BTTest	instanceVariableNames: 'firstCollection xCol yCol'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!BTTest commentStamp: '<historical>' prior: 0!- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	continuationQueue:		<Object>    Implementation Points!!BTTest methodsFor: 'initialization' stamp: 'Anonymous 1/18/2021 20:53'!setUp	firstCollection := { 1. 3. 5 .7. 11 }.	xCol := #(1 2 3 4).	yCol := #(5 4 3 8).! !!BTTest methodsFor: 'tests' stamp: 'Anonymous 1/18/2021 20:52'!test2TryEx1	"aquest test comprova tots els valors de la col·leccio"	|bt x|	bt := 	BT new.	x := bt try: firstCollection.		1 to: firstCollection size do: [ :n | (firstCollection at: n) = x 														ifTrue: [ self assert: (firstCollection at: n) = x. bt next.]														ifFalse: [self deny: (firstCollection at: n) = x ].	].! !!BTTest methodsFor: 'tests' stamp: 'Anonymous 1/17/2021 12:23'!test1TryEx1"Aquest test verifica que l'error esperat es CollectionIsEmpty"	|bt x|	bt := 	BT new.	x := bt try: firstCollection.	self should: [bt assert: false] raise: CollectionIsEmpty.! !!BTTest methodsFor: 'tests' stamp: 'Anonymous 1/16/2021 22:15'!testTryEx2	|bt x y |	bt := 	BT new.	x := bt try: xCol.	y := bt try: yCol.	(x * 2) = y ifTrue: [ self assert: (x * 2) = y ] 					ifFalse: [ self deny: (x * 2) = y. bt next ].	self assert: (x = 2).	self assert: (y = 4).! !!BTTest methodsFor: 'tests' stamp: 'Anonymous 1/18/2021 21:47'!testTryEx3"Aquest test verifica que el primer valor retornat sigui el primer element de la colecció"	Continuation callcc: [  :cc |		| bt a b c |		bt := BT with: [ 'Fi' traceCr. cc value: nil ].		a := bt try: (1 to: 15) asArray.		b := bt try: (1 to: 15) asArray.		c := bt try: (1 to: 15) asArray.		((a*a) + (b*b) = (c*c)) ifTrue: [ self assert: ((a*a) + (b*b) = (c*c)).												   bt assert: true ]									  ifFalse: [ self deny: ((a*a) + (b*b) = (c*c)). 													 bt assert: false ].		bt next.	].	! !Object subclass: #NQueens	instanceVariableNames: 'n queensPosition allSolutions'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!NQueens commentStamp: '<historical>' prior: 0!- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	n:		<Object>	queensPosition:		<Object>    Implementation Points!!NQueens methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/17/2021 13:59'!solve	|bt j|	bt := BT new.	1 to: n do: [ :i | j := bt try: (1 to: n) asArray.							j isNil ifFalse: [ queensPosition at: i put: j].							bt assert: (self legal: i) ].	self queensPosition: queensPosition.	! !!NQueens methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/16/2021 21:28'!legal: i	1 to: (i-1) do: [ :k | ((queensPosition at: k) = (queensPosition at: i))	 | 								 (((queensPosition at: i) - i) = ((queensPosition at: k) - k)) |								 (((queensPosition at: i) + i) = ((queensPosition at: k) + k))								 ifTrue: [^ false]].	^ true.! !!NQueens methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/17/2021 13:59'!solveAll	Continuation callcc: [ :cc |		|bt j|		bt := BT with: [cc value: nil].		1 to: n do: [ :i |							j := bt try: (1 to: n) asArray.							j isNil ifFalse: [ queensPosition at: i put: j].							(self legal: i) ifFalse: [ bt assert: false ]												ifTrue: [ i = n ifTrue: [allSolutions add: (queensPosition copy ). 																					bt next. ]].						].	].	self allSolutions: allSolutions.! !!NQueens methodsFor: 'accessing' stamp: 'Anonymous 1/16/2021 21:58'!allSolutions	^ allSolutions! !!NQueens methodsFor: 'accessing' stamp: 'Anonymous 1/16/2021 21:23'!queensPosition	^ queensPosition! !!NQueens methodsFor: 'accessing' stamp: 'Anonymous 1/16/2021 21:58'!allSolutions: anObject	allSolutions := anObject! !!NQueens methodsFor: 'accessing' stamp: 'Anonymous 1/16/2021 21:23'!queensPosition: anObject	queensPosition := anObject! !!NQueens methodsFor: 'instance creation' stamp: 'Anonymous 1/16/2021 10:30'!with: size	queensPosition := Array new: size withAll: 1.	n := size.! !!NQueens methodsFor: 'initialization' stamp: 'Anonymous 1/16/2021 21:57'!initialize	super initialize.	n := 0.	allSolutions := OrderedCollection new.	queensPosition := Array new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NQueens class	instanceVariableNames: ''!!NQueens class methodsFor: 'instance creation' stamp: 'Anonymous 1/16/2021 10:24'!with: size	^ (self new) with: size! !TestCase subclass: #NQueensTest	instanceVariableNames: 'nq5 nq6 nq8 nq7'	classVariableNames: ''	poolDictionaries: ''	category: 'Practica-CAP-2020'!!NQueensTest commentStamp: '<historical>' prior: 0!For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nq5:		<Object>	nq6:		<Object>	nq8:		<Object>    Implementation Points!!NQueensTest methodsFor: 'tests' stamp: 'Anonymous 1/18/2021 20:55'!testAllSol	|res5 res6 res7 res8 |	res5 := nq5 solveAll.	res6 := nq6 solveAll.	res7 := nq7 solveAll.	res8 := nq8 solveAll.	self assert: (res5 allSolutions size = 10).	self assert: (res5 allSolutions includes: #(1 3 5 2 4)).		self assert: (res6 allSolutions size = 4).	self assert: (res6 allSolutions includes: #(2 4 6 1 3 5)).	self assert: (res6 allSolutions includes: #(3 6 2 5 1 4)).	self assert: (res6 allSolutions includes: #(5 3 1 6 4 2)).	self assert: (res6 allSolutions includes: #(4 1 5 2 6 3)).		self assert: (res7 allSolutions size = 40).	self assert: (res7 allSolutions includes: #(1 3 5 7 2 4 6)).		self assert: (res8 allSolutions size = 92).	self assert: (res8 allSolutions includes: #(1 5 8 6 3 7 2 4)).! !!NQueensTest methodsFor: 'tests' stamp: 'Anonymous 1/18/2021 20:55'!testOneSol	|res5 res6 res7 res8 |	res5 := nq5 solve.	res6 := nq6 solve.	res7 := nq7 solve.	res8 := nq8 solve.	self assert: (res5 queensPosition size = 5).	self assert: (res5 queensPosition = #(1 3 5 2 4)).		self assert: (res6 queensPosition size = 6).	self assert: (res6 queensPosition = #(2 4 6 1 3 5)).		self assert: (res7 queensPosition size = 7).	self assert: (res7 queensPosition = #(1 3 5 7 2 4 6)).		self assert: (res8 queensPosition size = 8).	self assert: (res8 queensPosition = #(1 5 8 6 3 7 2 4)).! !!NQueensTest methodsFor: 'initialization' stamp: 'Anonymous 1/16/2021 22:02'!setUp	nq5 := NQueens with: 5.	nq6 := NQueens with: 6.	nq7 := NQueens with: 7.	nq8 := NQueens with: 8.! !